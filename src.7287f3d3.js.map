{"version":3,"sources":["js/timer.js","index.js"],"names":["refs","timer","document","querySelector","days","hours","mins","secs","pad","value","String","padStart","getTimeComponents","time","Math","floor","CountdownTimer","intervalId","targetDate","Date","isActive","start","setInterval","currentTime","now","updateClockInterface","textContent","init"],"mappings":";;;AAsFK,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCA/EL,IAAMA,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,uBAC7BE,MAAOH,SAASC,cAAc,wBAC9BG,KAAMJ,SAASC,cAAc,uBAC7BI,KAAML,SAASC,cAAc,wBAK/B,SAASK,EAAIC,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAUnC,SAASC,EAAkBC,GAiBlB,MAAA,CAAET,KAdII,EAAIM,KAAKC,MAAMF,EAAQ,QAcrBR,MAVDG,EACZM,KAAKC,MAAOF,EAAQ,MAAyB,OASzBP,KALTE,EAAIM,KAAKC,MAAOF,EAAQ,KAAoB,MAK7BN,KAFfC,EAAIM,KAAKC,MAAOF,EAAQ,IAAc,OAK/CG,IAAAA,EAAAA,SAAAA,IAsCD,EAAA,KAAA,IAhCDC,EAAa,KACXC,EAAa,IAAIC,KAAK,gBACxBC,GAAW,EAEf,SAASC,IACHD,IAIJA,GAAW,EAEXH,EAAaK,YAAY,WACjBC,IAAAA,EAAcJ,KAAKK,MAEWZ,EAAAA,EADlBM,EAAaK,GAE/BE,EAAqB,CAAErB,KADfA,EAAAA,KACqBC,MADfA,EAAAA,MACsBC,KADfA,EAAAA,KACqBC,KADfA,EAAAA,QAE1B,MAOL,SAASkB,EAAkD,GAA3BrB,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACjDP,EAAKI,KAAKsB,YAAiBtB,GAAAA,OAAAA,GAC3BJ,EAAKK,MAAMqB,YAAiBrB,GAAAA,OAAAA,GAC5BL,EAAKM,KAAKoB,YAAiBpB,GAAAA,OAAAA,GAC3BN,EAAKO,KAAKmB,YAAiBnB,GAAAA,OAAAA,GAE7B,SAASoB,IACPF,EAAqBb,EAAkBM,EAAaC,KAAKK,QAE3DH;;ACrFA,aADA,QAAA,oBACA,QAAA","file":"src.7287f3d3.js","sourceRoot":"../src","sourcesContent":["// Плагин это класс CountdownTimer, экземпляр которого создает новый таймер с настройками.\n\n// new CountdownTimer({\n//   selector: '#timer-1',\n//   targetDate: new Date('Jul 17, 2019'),\n// });\n\nconst refs = {\n  timer: document.querySelector('[data-value=\"days\"]'),\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  mins: document.querySelector('[data-value=\"mins\"]'),\n  secs: document.querySelector('[data-value=\"secs\"]'),\n};\n\n// Принимает число, приводит к строке и добавляет в начало 0 если число меньше 2-х знаков\n\nfunction pad(value) {\n  return String(value).padStart(2, \"0\");\n}\n\n//  - Принимает время в миллисекундах\n//  - Высчитывает сколько в них вмещается часов/минут/секунд\n//  - Возвращает обьект со свойствами hours, mins, secs\n//   - Адская копипаста со стека\n\n// time - разница между targetDate и текущей датой\n\nfunction getTimeComponents(time) {\n  // Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n  //  миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n  //     Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n  //  остатка % и делим его на количество миллисекунд в одном часе\n  //  (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n  const hours = pad(\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n  );\n  //     Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n  //     миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  //  Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n  //   миллисекунд в одной секунде (1000)\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n  return { days, hours, mins, secs };\n}\n\nclass CountdownTimer {}\n\n// function init() {\n//   const time = getTimeComponents(0);\n//   //   onTick(time);\n// }\nlet intervalId = null;\nconst targetDate = new Date(\"Oct 25, 2021\");\nlet isActive = false;\n\nfunction start() {\n  if (isActive) {\n    return;\n  }\n\n  isActive = true;\n\n  intervalId = setInterval(() => {\n    const currentTime = Date.now();\n    const deltaTime = targetDate - currentTime;\n    const { days, hours, mins, secs } = getTimeComponents(deltaTime);\n    updateClockInterface({ days, hours, mins, secs });\n  }, 1000);\n}\n\n// * - Принимает время в миллисекундах\n//  * - Высчитывает сколько в них вмещается часов/минут/секунд\n//  * - Рисует интерфейс\n//  */\nfunction updateClockInterface({ days, hours, mins, secs }) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.mins.textContent = `${mins}`;\n  refs.secs.textContent = `${secs}`;\n}\nfunction init() {\n  updateClockInterface(getTimeComponents(targetDate - Date.now()));\n}\nstart();\n","import \"./scss/main.scss\";\nimport \"./js/timer\";\n"]}