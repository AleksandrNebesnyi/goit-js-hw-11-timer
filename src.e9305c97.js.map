{"version":3,"sources":["js/timer.js","index.js"],"names":["refs","timer","document","querySelector","days","hours","mins","secs","pad","value","String","padStart","getTimeComponents","time","Math","floor","CountdownTimer","onTick","TargetDate","intervalId","isActive","setInterval","currentTime","Date","now","clearInterval","updateClockInterface","textContent","start"],"mappings":";;;AAgFA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA9EA,IAAMA,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,uBAC7BE,MAAOH,SAASC,cAAc,wBAC9BG,KAAMJ,SAASC,cAAc,uBAC7BI,KAAML,SAASC,cAAc,wBAK/B,SAASK,EAAIC,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAUnC,SAASC,EAAkBC,GAiBlB,MAAA,CAAET,KAdII,EAAIM,KAAKC,MAAMF,EAAQ,QAcrBR,MAVDG,EACZM,KAAKC,MAAOF,EAAQ,MAAyB,OASzBP,KALTE,EAAIM,KAAKC,MAAOF,EAAQ,KAAoB,MAK7BN,KAFfC,EAAIM,KAAKC,MAAOF,EAAQ,IAAc,OAK/CG,IAAAA,EAAAA,WACgC,SAAA,EAAA,GAAtBC,IAAAA,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC7BC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXH,KAAAA,OAASA,EACTC,KAAAA,WAAaA,EAgCtB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QA9BE,MAAA,WAAQ,IAAA,EAAA,KACF,KAAKE,WAGJA,KAAAA,UAAW,EACXD,KAAAA,WAAaE,YAAY,WACtBC,IAAAA,EAAcC,KAAKC,MAEnBX,EAAOD,EADK,EAAKM,WAAaI,GAEpC,EAAKL,OAAOJ,IACX,QAoBP,CAAA,IAAA,OAlBE,MAAA,WACEY,cAAc,KAAKN,YACdC,KAAAA,UAAW,MAgBpB,EArCMJ,GAyBN,SAASU,EAAkD,GAA3BtB,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACjDP,EAAKI,KAAKuB,YAAiBvB,GAAAA,OAAAA,GAC3BJ,EAAKK,MAAMsB,YAAiBtB,GAAAA,OAAAA,GAC5BL,EAAKM,KAAKqB,YAAiBrB,GAAAA,OAAAA,GAC3BN,EAAKO,KAAKoB,YAAiBpB,GAAAA,OAAAA,GAG7B,IAAMN,EAAQ,IAAIe,EAAe,CAC/BC,OAAQS,EACRR,WAAY,IAAIK,KAAK,kBAGvBtB,EAAM2B;;AC/EN,aADA,QAAA,oBACA,QAAA","file":"src.e9305c97.js","sourceRoot":"../src","sourcesContent":["// Плагин это класс CountdownTimer, экземпляр которого создает новый таймер с настройками.\n\nconst refs = {\n  timer: document.querySelector('[data-value=\"days\"]'),\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  mins: document.querySelector('[data-value=\"mins\"]'),\n  secs: document.querySelector('[data-value=\"secs\"]'),\n};\n\n// Принимает число, приводит к строке и добавляет в начало 0 если число меньше 2-х знаков\n\nfunction pad(value) {\n  return String(value).padStart(2, \"0\");\n}\n\n//  - Принимает время в миллисекундах\n//  - Высчитывает сколько в них вмещается часов/минут/секунд\n//  - Возвращает обьект со свойствами hours, mins, secs\n//   - Адская копипаста со стека\n\n// time - разница между targetDate и текущей датой\n\nfunction getTimeComponents(time) {\n  // Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n  //  миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n  //     Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n  //  остатка % и делим его на количество миллисекунд в одном часе\n  //  (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n  const hours = pad(\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n  );\n  //     Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n  //     миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  //  Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n  //   миллисекунд в одной секунде (1000)\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n  return { days, hours, mins, secs };\n}\n\nclass CountdownTimer {\n  constructor({ onTick, TargetDate }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n    this.TargetDate = TargetDate;\n  }\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    this.isActive = true;\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = this.TargetDate - currentTime;\n      const time = getTimeComponents(deltaTime);\n      this.onTick(time);\n    }, 1000);\n  }\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n  }\n}\n\nfunction updateClockInterface({ days, hours, mins, secs }) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.mins.textContent = `${mins}`;\n  refs.secs.textContent = `${secs}`;\n}\n\nconst timer = new CountdownTimer({\n  onTick: updateClockInterface,\n  TargetDate: new Date(\"Oct 18, 2021\"),\n});\n\ntimer.start();\n","import \"./scss/main.scss\";\nimport \"./js/timer\";\n"]}